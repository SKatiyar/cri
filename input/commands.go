package input

import types "github.com/SKatiyar/cri/types"
import "github.com/SKatiyar/cri"

type Input struct {
	conn cri.Connector
}

func New(conn cri.Connector) *Input {
	return &Input{conn}
}

type SetIgnoreInputEventsRequest struct {
	Ignore bool `json:"ignore"`// Ignores input events processing when set to true.
}

func (obj *Input) SetIgnoreInputEvents(request *SetIgnoreInputEventsRequest) (err error) {
	err = obj.conn.Send("Input.setIgnoreInputEvents", request, nil)
	return
}

type DispatchKeyEventRequest struct {
	Type			string				`json:"type"`// Type of the key event.
	Modifiers		*int				`json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp		*types.Input_TimeSinceEpoch	`json:"timestamp,omitempty"`// Time at which the event occurred.
	Text			*string				`json:"text,omitempty"`// Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: "")
	UnmodifiedText		*string				`json:"unmodifiedText,omitempty"`// Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
	KeyIdentifier		*string				`json:"keyIdentifier,omitempty"`// Unique key identifier (e.g., 'U+0041') (default: "").
	Code			*string				`json:"code,omitempty"`// Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
	Key			*string				`json:"key,omitempty"`// Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
	WindowsVirtualKeyCode	*int				`json:"windowsVirtualKeyCode,omitempty"`// Windows virtual key code (default: 0).
	NativeVirtualKeyCode	*int				`json:"nativeVirtualKeyCode,omitempty"`// Native virtual key code (default: 0).
	AutoRepeat		*bool				`json:"autoRepeat,omitempty"`// Whether the event was generated from auto repeat (default: false).
	IsKeypad		*bool				`json:"isKeypad,omitempty"`// Whether the event was generated from the keypad (default: false).
	IsSystemKey		*bool				`json:"isSystemKey,omitempty"`// Whether the event was a system key event (default: false).
	Location		*int				`json:"location,omitempty"`// Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default: 0).
}

func (obj *Input) DispatchKeyEvent(request *DispatchKeyEventRequest) (err error) {
	err = obj.conn.Send("Input.dispatchKeyEvent", request, nil)
	return
}

type DispatchMouseEventRequest struct {
	Type		string				`json:"type"`// Type of the mouse event.
	X		float32				`json:"x"`// X coordinate of the event relative to the main frame's viewport in CSS pixels.
	Y		float32				`json:"y"`// Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Modifiers	*int				`json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp	*types.Input_TimeSinceEpoch	`json:"timestamp,omitempty"`// Time at which the event occurred.
	Button		*string				`json:"button,omitempty"`// Mouse button (default: "none").
	ClickCount	*int				`json:"clickCount,omitempty"`// Number of times the mouse button was clicked (default: 0).
	DeltaX		*float32			`json:"deltaX,omitempty"`// X delta in CSS pixels for mouse wheel event (default: 0).
	DeltaY		*float32			`json:"deltaY,omitempty"`// Y delta in CSS pixels for mouse wheel event (default: 0).
}

func (obj *Input) DispatchMouseEvent(request *DispatchMouseEventRequest) (err error) {
	err = obj.conn.Send("Input.dispatchMouseEvent", request, nil)
	return
}

type DispatchTouchEventRequest struct {
	Type		string				`json:"type"`// Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while TouchStart and TouchMove must contains at least one.
	TouchPoints	[]types.Input_TouchPoint	`json:"touchPoints"`// Active touch points on the touch device. One event per any changed point (compared to previous touch event in a sequence) is generated, emulating pressing/moving/releasing points one by one.
	Modifiers	*int				`json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp	*types.Input_TimeSinceEpoch	`json:"timestamp,omitempty"`// Time at which the event occurred.
}

func (obj *Input) DispatchTouchEvent(request *DispatchTouchEventRequest) (err error) {
	err = obj.conn.Send("Input.dispatchTouchEvent", request, nil)
	return
}

type EmulateTouchFromMouseEventRequest struct {
	Type		string				`json:"type"`// Type of the mouse event.
	X		int				`json:"x"`// X coordinate of the mouse pointer in DIP.
	Y		int				`json:"y"`// Y coordinate of the mouse pointer in DIP.
	Timestamp	types.Input_TimeSinceEpoch	`json:"timestamp"`// Time at which the event occurred.
	Button		string				`json:"button"`// Mouse button.
	DeltaX		*float32			`json:"deltaX,omitempty"`// X delta in DIP for mouse wheel event (default: 0).
	DeltaY		*float32			`json:"deltaY,omitempty"`// Y delta in DIP for mouse wheel event (default: 0).
	Modifiers	*int				`json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	ClickCount	*int				`json:"clickCount,omitempty"`// Number of times the mouse button was clicked (default: 0).
}

func (obj *Input) EmulateTouchFromMouseEvent(request *EmulateTouchFromMouseEventRequest) (err error) {
	err = obj.conn.Send("Input.emulateTouchFromMouseEvent", request, nil)
	return
}

type SynthesizePinchGestureRequest struct {
	X			float32				`json:"x"`// X coordinate of the start of the gesture in CSS pixels.
	Y			float32				`json:"y"`// Y coordinate of the start of the gesture in CSS pixels.
	ScaleFactor		float32				`json:"scaleFactor"`// Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
	RelativeSpeed		*int				`json:"relativeSpeed,omitempty"`// Relative pointer speed in pixels per second (default: 800).
	GestureSourceType	*types.Input_GestureSourceType	`json:"gestureSourceType,omitempty"`// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

func (obj *Input) SynthesizePinchGesture(request *SynthesizePinchGestureRequest) (err error) {
	err = obj.conn.Send("Input.synthesizePinchGesture", request, nil)
	return
}

type SynthesizeScrollGestureRequest struct {
	X			float32				`json:"x"`// X coordinate of the start of the gesture in CSS pixels.
	Y			float32				`json:"y"`// Y coordinate of the start of the gesture in CSS pixels.
	XDistance		*float32			`json:"xDistance,omitempty"`// The distance to scroll along the X axis (positive to scroll left).
	YDistance		*float32			`json:"yDistance,omitempty"`// The distance to scroll along the Y axis (positive to scroll up).
	XOverscroll		*float32			`json:"xOverscroll,omitempty"`// The number of additional pixels to scroll back along the X axis, in addition to the given distance.
	YOverscroll		*float32			`json:"yOverscroll,omitempty"`// The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
	PreventFling		*bool				`json:"preventFling,omitempty"`// Prevent fling (default: true).
	Speed			*int				`json:"speed,omitempty"`// Swipe speed in pixels per second (default: 800).
	GestureSourceType	*types.Input_GestureSourceType	`json:"gestureSourceType,omitempty"`// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
	RepeatCount		*int				`json:"repeatCount,omitempty"`// The number of times to repeat the gesture (default: 0).
	RepeatDelayMs		*int				`json:"repeatDelayMs,omitempty"`// The number of milliseconds delay between each repeat. (default: 250).
	InteractionMarkerName	*string				`json:"interactionMarkerName,omitempty"`// The name of the interaction markers to generate, if not empty (default: "").
}

func (obj *Input) SynthesizeScrollGesture(request *SynthesizeScrollGestureRequest) (err error) {
	err = obj.conn.Send("Input.synthesizeScrollGesture", request, nil)
	return
}

type SynthesizeTapGestureRequest struct {
	X			float32				`json:"x"`// X coordinate of the start of the gesture in CSS pixels.
	Y			float32				`json:"y"`// Y coordinate of the start of the gesture in CSS pixels.
	Duration		*int				`json:"duration,omitempty"`// Duration between touchdown and touchup events in ms (default: 50).
	TapCount		*int				`json:"tapCount,omitempty"`// Number of times to perform the tap (e.g. 2 for double tap, default: 1).
	GestureSourceType	*types.Input_GestureSourceType	`json:"gestureSourceType,omitempty"`// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

func (obj *Input) SynthesizeTapGesture(request *SynthesizeTapGestureRequest) (err error) {
	err = obj.conn.Send("Input.synthesizeTapGesture", request, nil)
	return
}
